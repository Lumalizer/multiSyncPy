window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "multiSyncPy", "modulename": "multiSyncPy", "type": "module", "doc": "<p>Multivariate Synchrony</p>\n\n<p>This module provides functions to compute multivariate synchrony metrics and to generate synthetic data. It contains the following subpackages:</p>\n\n<ul>\n<li>synchrony_metrics - Provides functions used to compute synchrony metrics on multivariate time series.</li>\n<li>data_generation - Provides functions used to generate synthetic data for the purposes of testing and exploring multivariate synchrony metrics.</li>\n</ul>\n"}, {"fullname": "multiSyncPy.data_generation", "modulename": "multiSyncPy.data_generation", "type": "module", "doc": "<p>Data Generation for Synchrony Metrics</p>\n\n<p>This module provides functions used to generate synthetic data for the purposes of testing and exploring multivariate synchrony metrics. It contains the following functions:</p>\n\n<ul>\n<li>autoregressive_data - Produces a time series using a stochastic autoregressive function of order two.</li>\n<li>kuramoto_data - Produces a time series using a Kuramoto model.</li>\n</ul>\n"}, {"fullname": "multiSyncPy.data_generation.autoregressive_data", "modulename": "multiSyncPy.data_generation", "qualname": "autoregressive_data", "type": "function", "doc": "<p>Generates synthetic data using an autoregressive function where each time point depends on the previous two.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>length</strong> (int):\nThe number of time steps to generate.</li>\n<li><strong>phi_1</strong> (float):\nThe weighting of the value two time steps ago.</li>\n<li><strong>phi_2</strong> (float):\nThe weighting of the value one time steps ago.</li>\n<li><strong>epsilon</strong> (float):\nThe standard deviation of Gaussian noise added at each time step.</li>\n<li><strong>c</strong> (float):\nAn optional bias term.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>autoregressive_data</strong> (array):\nAn array containing autoregressive synthetic data.</li>\n</ul>\n", "signature": "(length, phi_1, phi_2, epsilon, c=0)", "funcdef": "def"}, {"fullname": "multiSyncPy.data_generation.kuramoto_data", "modulename": "multiSyncPy.data_generation", "qualname": "kuramoto_data", "type": "function", "doc": "<p>Generates synthetic data from a Kuramoto model of coupled oscillators.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>phases</strong> (array):\nAn array of initial phases in radians for each oscillator.</li>\n<li><strong>omegas</strong> (array):\nThe natural frequencies of each oscillator. Must be the same length as phases.</li>\n<li><strong>K</strong> (float):\nThe coupling strength between oscillators in the model.</li>\n<li><strong>alpha</strong> (float):\nA parameter to control the amount of Gaussian noise added at each time step.</li>\n<li><strong>d_t</strong> (float):\nThe change in time that each time step represents.</li>\n<li><strong>length</strong> (int):\nThe number of time points desired in the synthetic data.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>kuramoto_data</strong> (array):\nAn array containing synthetic data generated from the Kuramoto model.</li>\n</ul>\n", "signature": "(phases, omegas, K, alpha, d_t, length)", "funcdef": "def"}, {"fullname": "multiSyncPy.data_generation.linear_nonstationary_transition", "modulename": "multiSyncPy.data_generation", "qualname": "linear_nonstationary_transition", "type": "function", "doc": "<p></p>\n", "signature": "(begin_frequency, end_frequency, sampling_rate, duration)", "funcdef": "def"}, {"fullname": "multiSyncPy.synchrony_metrics", "modulename": "multiSyncPy.synchrony_metrics", "type": "module", "doc": "<p>Synchrony Metrics</p>\n\n<p>This module provides functions used to compute synchrony metrics on multivariate time series. It contains the following functions:</p>\n\n<ul>\n<li>recurrence_matrix - Creates a recurrence matrix from a multivariate time series. </li>\n<li>get_diagonal_lengths - Finds the lengths of diagonals in a recurrence matrix. Used by rqa_metrics. </li>\n<li>rqa_metrics - Computes the proportion of recurrence, proportion of determinism, average diagonal length and longest diagonal length for an input recurrence matrix. </li>\n<li>rho - A cluster-phase synchrony metric.</li>\n<li>coherence_team - A synchrony metric based on spectral density.</li>\n<li>sum_normalized_csd - A synchrony metric based on cross-spectral density, similar to coherence_team().</li>\n<li>convert_to_terciles - Takes a time series and returns a time series where each value is replaced by a number indicating which tercile it belongs in. Used by pattern_entropy. </li>\n<li>symbolic_entropy - A metric based on the entropy of the combined 'state' across a multivariate time series. </li>\n<li>kuramoto_weak_null - Tests the significance of the observed Kuramoto order parameter values in a sample of multivariate time series. </li>\n<li>metric_fixed_parameters - Provides a copy of a function to calculate a synchrony metric, but with all parameters fixed except the input data. For use with apply_windowed when functions have multiple parameters. </li>\n<li>apply_windowed - A function used to apply other functions in a windowed fashion. </li>\n<li>shuffle_recordings - Creates surrogate_data by shuffling variables between time series in a sample of multivariate time series. </li>\n<li>shuffle_time_windows - Creates surrogate_data by shuffling time windows, separately for each variable of a multivariate time series. </li>\n<li>get_driver_scores - Gets 'driver' scores indicating which variables are influential in a multivariate time series. Used by get_sync_index()</li>\n<li>get_empath_scores - Gets 'empath' scores indicating which variables are most influenced in a multivariate time series. Used by get_sync_index()</li>\n<li>get_sync_index - A synchrony metric based on how much variables influence one another.</li>\n</ul>\n"}, {"fullname": "multiSyncPy.synchrony_metrics.recurrence_matrix", "modulename": "multiSyncPy.synchrony_metrics", "qualname": "recurrence_matrix", "type": "function", "doc": "<p>Creates a recurrence matrix from a multivariate time series. The Euclidean distance, combined with the radius parameter, is used to determine which points are close enough to count as 'recurrent'. </p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>data</strong> (ndarray):\nAn array containing the multivariate time series with shape (number_signals, duration).</li>\n<li><strong>radius</strong> (float):\nThe Euclidean distance below which two points will count as recurrent.</li>\n<li><strong>normalise</strong> (bool):\nWhether to apply normalisation. Normalisation is applied on each variable separately, transforming the data to have mean 0 and variance 1, which is intended to help balance the relative importance of each variable when calculating Euclidean distances.</li>\n<li><strong>embedding_dimension</strong> (int):\nThe number of copies of the multivariate time series to use. If provided, embedding_delay must also be used.</li>\n<li><strong>embedding_delay</strong> (int):\nIf using embedding_dimension, this is the delay in number of time steps that is applied to each new copy of the multivariate time series.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>recurrence_matrix</strong> (ndarray):\nA square matrix with shape (duration, duration). Cells have value True when two time points are recurrent, and False otherwise.</li>\n</ul>\n", "signature": "(\n    data,\n    radius,\n    normalise=True,\n    embedding_dimension=None,\n    embedding_delay=None\n)", "funcdef": "def"}, {"fullname": "multiSyncPy.synchrony_metrics.get_diagonal_lengths", "modulename": "multiSyncPy.synchrony_metrics", "qualname": "get_diagonal_lengths", "type": "function", "doc": "<p>Returns the lengths of sequences where the successive cells have a value of 1, and how many times sequences of each length were observed, looking along the diagonals of a recurrence matrix. Considers only the upper triangle of the recurrence matrix, not including the line of identity. </p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>recurrence_matrix</strong> (ndarray):\nMatrix indicating which time points are recurrent with other time points. Truthy values are used to indicate a recurrence.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>full_diagonal_length_counts</strong> (dict):\nA dict where the keys are the length of a sequence and the values are the number of times a sequence of that length was observed.</li>\n</ul>\n", "signature": "(recurrence_matrix)", "funcdef": "def"}, {"fullname": "multiSyncPy.synchrony_metrics.rqa_metrics", "modulename": "multiSyncPy.synchrony_metrics", "qualname": "rqa_metrics", "type": "function", "doc": "<p>Returns the proportion of recurrence, proportion of determinism, mean diagonal length, and max diagonal length, for the input recurrence matrix. </p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>recurrence_matrix</strong> (ndarray):\nMatrix indicating which time points are recurrent with other time points. Truthy values are used to indicate a recurrence.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>rec</strong> (float):\nA value between 0 and 1 representing the proportion of recurrence observed in the recurrence matrix. Multiply by 100 to get the %REC.</li>\n<li><strong>det</strong> (float):\nA value between 0 and 1 representing the proportion of determinism observed in the recurrence matrix. Multiply by 100 to get the %det.</li>\n<li><strong>mean_length</strong> (float):\nThe mean length of diagonal sequences in the recurrence matrix.</li>\n<li><strong>max_length</strong> (int):\nThe maximum length of diagonal sequences in the recurrence matrix.</li>\n</ul>\n", "signature": "(recurrence_matrix, min_length=2)", "funcdef": "def"}, {"fullname": "multiSyncPy.synchrony_metrics.rho", "modulename": "multiSyncPy.synchrony_metrics", "qualname": "rho", "type": "function", "doc": "<p>Returns the quantity defined by Richardson et al. as 'rho' in \"Measuring group synchrony: a cluster-phase method foranalyzing multivariate movement time-series:, doi: 10.3389/fphys.2012.00405. </p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>phases</strong> (ndarray):\nThe phase time series (in radians) of the signals with the shape (number_signals, duration).</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>rho_group_i</strong> (ndarray):\nThe quantity rho, computed for each signal at each time step.</li>\n<li><strong>rho_group</strong> (ndarray):\nThe quantity rho averaged over time.</li>\n</ul>\n", "signature": "(phases)", "funcdef": "def"}, {"fullname": "multiSyncPy.synchrony_metrics.coherence_team", "modulename": "multiSyncPy.synchrony_metrics", "qualname": "coherence_team", "type": "function", "doc": "<p>Returns the quantity defined by Reinero, Dikker, and Bavel as 'coherence' in \"Inter-brain synchrony in teams predicts collective performance\", doi: 10.1093/scan/nsaa135, with the quantity being averaged across the team.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>data</strong> (ndarray):\nAn array containing the time series of measurements with shape (number_signals, duration).</li>\n<li><strong>nperseg</strong> (int):\nThe number of time steps used to form a 'sample' of the signal when computing coherence, see scipy.signal.coherence documentation for more details. Optional, and will default to the lesser of (data duration / 4) and 256.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>coherence</strong> (float):\nThe quantity coherence.</li>\n</ul>\n", "signature": "(data, nperseg=None)", "funcdef": "def"}, {"fullname": "multiSyncPy.synchrony_metrics.sum_normalized_csd", "modulename": "multiSyncPy.synchrony_metrics", "qualname": "sum_normalized_csd", "type": "function", "doc": "<p>Returns a quantity, based on the cross-spectral density (CSD), similar to that of coherence_team() but which is less impacted by Gaussian noise.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>data</strong> (ndarray):\nAn array containing the time series of measurements with shape (number_signals, duration).</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>aggregated_csd</strong> (float):\nThe sum-normalized CSD quantity.</li>\n</ul>\n", "signature": "(data)", "funcdef": "def"}, {"fullname": "multiSyncPy.synchrony_metrics.convert_to_terciles", "modulename": "multiSyncPy.synchrony_metrics", "qualname": "convert_to_terciles", "type": "function", "doc": "<p>Maps the input time series to numbers representing 'low', 'medium' and 'high' values. The thresholds for deciding 'low', 'medium' and 'high' are terciles. </p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>data</strong> (array):\nAn array containing the time series of measurements for a single signal.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>data_terciles</strong> (array):\nAn array where 0 represents a 'low' value, 1 represents a 'medium' value and 2 represents a 'high' value</li>\n</ul>\n", "signature": "(data)", "funcdef": "def"}, {"fullname": "multiSyncPy.synchrony_metrics.symbolic_entropy", "modulename": "multiSyncPy.synchrony_metrics", "qualname": "symbolic_entropy", "type": "function", "doc": "<p>Computes entropy after mapping the signals to numbers representing 'low', 'medium' and 'high' values, and then concatenating these numbers (across the signals) to create a 'pattern' at each time step. The thresholds for deciding 'low', 'medium' and 'high' are terciles. </p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>data</strong> (ndarray):\nAn array containing the time series of measurements, with the shape (number_signals, duration).</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>pattern_entropy</strong> (float):\nThe Shannon entropy of symbols found by mapping the input signals to 'low', 'medium' and 'high' and concatenating across signals.</li>\n</ul>\n", "signature": "(data)", "funcdef": "def"}, {"fullname": "multiSyncPy.synchrony_metrics.kuramoto_weak_null", "modulename": "multiSyncPy.synchrony_metrics", "qualname": "kuramoto_weak_null", "type": "function", "doc": "<p>Estimates the significance of the Kuramoto order parameter for a sample of multi-signal recordings, according to the 'weak null' test described by Frank and Richardson in \"On a test statistic for the Kuramoto order parameter of synchronization: An illustration for group synchronization during rocking chairs\", doi: 10.1016/j.physd.2010.07.015. </p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>phases</strong> (list):\nA list containing the phase time series (in radians) for each member of the sample, with each phase time series being an array with the shape (number_signals, duration). Each multivariate time series in the sample can be a different duration, although different numbers of signals are not permissible.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>p-value</strong> (float):\nThe p-value of the observed Kuramoto order parameter.</li>\n<li><strong>t-statistic</strong> (float):\nThe t-statistic.</li>\n<li><strong>df</strong> (float):\nThe degrees of freedom.</li>\n</ul>\n", "signature": "(phases)", "funcdef": "def"}, {"fullname": "multiSyncPy.synchrony_metrics.metric_fixed_parameters", "modulename": "multiSyncPy.synchrony_metrics", "qualname": "metric_fixed_parameters", "type": "function", "doc": "<p>Returns a copy of a function to compute a metric, but with all parameters fixed except the data input. For use with apply_windowed. </p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>function</strong> (function):\nA function to compute a synchrony metric.</li>\n<li><strong>parameters</strong> (dict):\nA dictionary containing the parameters and their values for the function, except the main data input parameter.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>new_function</strong> (function):\nA copy of the function to compute a synchrony metric, with all parameters fixed except the data input.</li>\n</ul>\n", "signature": "(function, parameters)", "funcdef": "def"}, {"fullname": "multiSyncPy.synchrony_metrics.apply_windowed", "modulename": "multiSyncPy.synchrony_metrics", "qualname": "apply_windowed", "type": "function", "doc": "<p>Applies a function in a windowed fashion to a time series with shape (number_signals, duration). </p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>data</strong> (ndarray):\nAn array containing the time series of measurements, with the shape (number_signals, duration).</li>\n<li><strong>function</strong> (function):\nThe function to apply within each window.</li>\n<li><strong>window_length</strong> (int):\nThe number of time steps to be included in a window.</li>\n<li><strong>step</strong> (int):\nThe number of time steps by which to move forward in order to obtain the next window.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>windowed_results</strong> (ndarray):\nA numpy array containing the results of the function when it is applied to each window.</li>\n</ul>\n", "signature": "(data, function, window_length, step=None)", "funcdef": "def"}, {"fullname": "multiSyncPy.synchrony_metrics.shuffle_recordings", "modulename": "multiSyncPy.synchrony_metrics", "qualname": "shuffle_recordings", "type": "function", "doc": "<p>Creates surrogate data by shuffling variables between time series in a sample of multivariate recordings. This assumes that all recordings in the sample are the same length. </p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>data</strong> (ndarray):\nAn array containing a sample of recordings with shape (number_recordings, number_signals, duration).</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>surrogate_data</strong> (ndarray):\nAn array containing a sample of recordings where the variables have been shuffled between recordings, with shape (number_recordings, number_signals, duration).</li>\n</ul>\n", "signature": "(data)", "funcdef": "def"}, {"fullname": "multiSyncPy.synchrony_metrics.shuffle_time_windows", "modulename": "multiSyncPy.synchrony_metrics", "qualname": "shuffle_time_windows", "type": "function", "doc": "<p>Creates surrogate data by shuffling windows of data within each variable in a multivariate time series. </p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>data</strong> (ndarray):\nAn array containing a multivariate recording with shape (number_signals, duration).</li>\n<li><strong>window_length</strong> (int):\nThe number of time steps to use as the window length.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>surrogate_data</strong> (ndarray):\nAn array containing a multivariate recording where windows of time have been shuffled independently for each variable, with shape (number_signals, duration).</li>\n</ul>\n", "signature": "(data, window_length)", "funcdef": "def"}, {"fullname": "multiSyncPy.synchrony_metrics.get_sync_coef", "modulename": "multiSyncPy.synchrony_metrics", "qualname": "get_sync_coef", "type": "function", "doc": "<p>Finds the synchronisation coefficient for a pair of univariate time series. </p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>series_1, series_2</strong> (ndarrays shape ( 1, duration )):\nThe data to analyse.</li>\n<li><strong>lag_length</strong> (int):\nDefault value is 10. See recommendations at page 23 ( for GSR use 1, 5, 6 or 20 ) of the paper \"Development of a Synchronization Coefficient for Biosocial Interactions in Groups and Teams\" by Stephen J. Guastello and Anthony F. Peressini.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>sync_coef</strong> (float):\nHow much of series_1 is predicted by series_2 ( as described in \"Development of a Synchronization Coefficient for Biosocial Interactions in Groups and Teams\" )</li>\n</ul>\n", "signature": "(series_1, series_2, lag_length=10)", "funcdef": "def"}, {"fullname": "multiSyncPy.synchrony_metrics.get_matrix_sync_coef", "modulename": "multiSyncPy.synchrony_metrics", "qualname": "get_matrix_sync_coef", "type": "function", "doc": "<p>Finds all pairwise synchronisation coefficients for a multivariate time series. </p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>series</strong> (ndarray):\nA multivariate time series to analyse, with the shape (number_signals, duration).</li>\n<li><strong>lag_length</strong> (int):\nThe lag length to use. For more details of this parameter, see the paper \"Development of a Synchronization Coefficient for Biosocial Interactions in Groups and Teams\" by Stephen J. Guastello and Anthony F. Peressini.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>m</strong> (ndarray):\nA matrix of synchrony coefficients with shape ( number variables in multivariate input, number variables in multivariate input )</li>\n</ul>\n", "signature": "(series, lag_length)", "funcdef": "def"}, {"fullname": "multiSyncPy.synchrony_metrics.get_driver_scores", "modulename": "multiSyncPy.synchrony_metrics", "qualname": "get_driver_scores", "type": "function", "doc": "<p>Finds the 'driver' scores for all the variables in a multivariate time series. </p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>series</strong> (ndarray):\nA multivariate time series to analyse, with the shape (number_signals, duration).</li>\n<li><strong>lag_length</strong> (int):\nThe lag length to use. The default value is 10. For more details of this parameter, see the paper \"Development of a Synchronization Coefficient for Biosocial Interactions in Groups and Teams\" by Stephen J. Guastello and Anthony F. Peressini.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>driver_scores</strong> (list):\nA list containing the driver scores of participants.</li>\n</ul>\n", "signature": "(series, lag_length=10)", "funcdef": "def"}, {"fullname": "multiSyncPy.synchrony_metrics.get_empath_scores", "modulename": "multiSyncPy.synchrony_metrics", "qualname": "get_empath_scores", "type": "function", "doc": "<p>Finds the 'empath' scores for all the variables in a multivariate time series. </p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>series</strong> (ndarray):\nA multivariate time series to analyse, with the shape (number_signals, duration).</li>\n<li><strong>lag_length</strong> (int):\nThe lag length to use. The default value is 10. For more details of this parameter, see the paper \"Development of a Synchronization Coefficient for Biosocial Interactions in Groups and Teams\" by Stephen J. Guastello and Anthony F. Peressini.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>empath_scores</strong> (list):\nA list containing the empath scores of participants.</li>\n</ul>\n", "signature": "(series, lag_length=10)", "funcdef": "def"}, {"fullname": "multiSyncPy.synchrony_metrics.get_sync_index", "modulename": "multiSyncPy.synchrony_metrics", "qualname": "get_sync_index", "type": "function", "doc": "<p>Finds the synchronisation index for a multivariate time series. </p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>series</strong> (ndarray):\nA multivariate time series to analyse, with the shape (number_signals, duration).</li>\n<li><strong>lag_length</strong> (int):\nThe lag length to use. The default value is 10. For more details of this parameter, see the paper \"Development of a Synchronization Coefficient for Biosocial Interactions in Groups and Teams\" by Stephen J. Guastello and Anthony F. Peressini.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>sync_index</strong> (float):\nThe Synchrony Index computed using the driver and empath scores.</li>\n</ul>\n", "signature": "(series, lag_length=10)", "funcdef": "def"}, {"fullname": "multiSyncPy.visualisations", "modulename": "multiSyncPy.visualisations", "type": "module", "doc": "<p>Synchrony Metrics</p>\n\n<p>This module provides functions used to calculate and visualise synchrony metrics from a multivariate time series. It contains the following functions:</p>\n\n<ul>\n<li>plot_entropy - Calculates and visualises the symbolic entropy of a multivariate time series. </li>\n<li>plot_coherence - Calculates and visualises the coherence of a multivariate time series. </li>\n<li>plot_csd - Calculates and visualises the 'sum-normalized cross spectral density' of a multivariate time series. </li>\n<li>plot_rho - Calculates and visualises the cluster-phase 'rho' of a multivariate time series. </li>\n<li>plot_synchronyindex - Calculates and visualises the 'synchronization index' of a multivariate time series.</li>\n</ul>\n"}, {"fullname": "multiSyncPy.visualisations.plot_entropy", "modulename": "multiSyncPy.visualisations", "qualname": "plot_entropy", "type": "function", "doc": "<p>Plots the windowed group entropy over a heatmap of the individual signals' tercile patterns.  </p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>data</strong> (ndarray):\nAn array containing the multivariate time series with shape (number_signals, duration).</li>\n<li><strong>window_length</strong> (int):\nThe number of time steps to be included in a window.</li>\n<li><strong>step</strong> (int):\nThe number of time steps by which to move forward in order to obtain the next window.</li>\n<li><strong>figsize</strong> (tuple):\nThe width and height of the figure in inches, respectively. Default is (8,4).</li>\n<li><strong>custom_cols</strong> (tuple):\nThe heatmap colormap/colors and line color to use for the plots. Default is (['#D4ECFC', '#FCF49C', '#FCC4AC'], 'black').</li>\n<li><strong>gradient</strong> (bool):\nDetermines whether the heatmap is displayed as a gradient, or matches the window and step size of the group metric. Default is False.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>figure</strong> (figure):\nA figure containing the windowed group entropy and the individual signals' tercile patterns, along with axes labels and a colorbar.</li>\n</ul>\n", "signature": "(\n    data,\n    window_length,\n    step=None,\n    figsize=None,\n    custom_cols=None,\n    gradient=False\n)", "funcdef": "def"}, {"fullname": "multiSyncPy.visualisations.plot_coherence", "modulename": "multiSyncPy.visualisations", "qualname": "plot_coherence", "type": "function", "doc": "<p>Plots the windowed group coherence over a heatmap of the pairwise signal coherence.  </p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>data</strong> (ndarray):\nAn array containing the multivariate time series with shape (number_signals, duration).</li>\n<li><strong>window_length</strong> (int):\nThe number of time steps to be included in a window.</li>\n<li><strong>step</strong> (int):\nThe number of time steps by which to move forward in order to obtain the next window.</li>\n<li><strong>gradient</strong> (bool):\nDetermines whether the heatmap is displayed as a gradient, or matches the window and step size of the group metric. Default is False.</li>\n<li><strong>figsize</strong> (tuple):\nThe width and height of the figure in inches, respectively. Default is (8,4).</li>\n<li><strong>custom_cols</strong> (tuple):\nThe heatmap colormap/colors and line color to use for the plots. Default is ('YlOrRd', 'black').</li>\n<li><strong>bounded_yaxis</strong> (bool):\nDetermines whether the y-axis limits of the group metric are bounded to their range. Default is True.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>figure</strong> (figure):\nA figure containing the windowed group coherence and the pairwise coherence, along with axes labels and a colorbar.</li>\n</ul>\n", "signature": "(\n    data,\n    window_length,\n    step=None,\n    gradient=False,\n    figsize=None,\n    custom_cols=None,\n    bounded_yaxis=True\n)", "funcdef": "def"}, {"fullname": "multiSyncPy.visualisations.plot_csd", "modulename": "multiSyncPy.visualisations", "qualname": "plot_csd", "type": "function", "doc": "<p>Plots the windowed group sum-normalized CSD over a heatmap of the pairwise sum-normalized CSD.  </p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>data</strong> (ndarray):\nAn array containing the multivariate time series with shape (number_signals, duration).</li>\n<li><strong>window_length</strong> (int):\nThe number of time steps to be included in a window.</li>\n<li><strong>step</strong> (int):\nThe number of time steps by which to move forward in order to obtain the next window.</li>\n<li><strong>gradient</strong> (bool):\nDetermines whether the heatmap is displayed as a gradient, or matches the window and step size of the group metric. Default is False.</li>\n<li><strong>figsize</strong> (tuple):\nThe width and height of the figure in inches, respectively. Default is (8,4).</li>\n<li><strong>custom_cols</strong> (tuple):\nThe heatmap colormap/colors and line color to use for the plots. Default is ('YlOrRd', 'black').</li>\n<li><strong>bounded_yaxis</strong> (bool):\nDetermines whether the y-axis limits of the group metric are bounded to their range. Default is True.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>figure</strong> (figure):\nA figure containing the windowed group sum-normalized CSD and the pairwise sum-normalized CSD, along with axes labels and a colorbar.</li>\n</ul>\n", "signature": "(\n    data,\n    window_length,\n    step=None,\n    gradient=False,\n    figsize=None,\n    custom_cols=None,\n    bounded_yaxis=True\n)", "funcdef": "def"}, {"fullname": "multiSyncPy.visualisations.plot_rho", "modulename": "multiSyncPy.visualisations", "qualname": "plot_rho", "type": "function", "doc": "<p>Plots the group rho over a heatmap of the relative individual rho by default, and relative phase values of individual signals by choice.  </p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>data</strong> (ndarray):\nAn array containing the multivariate time series with shape (number_signals, duration).</li>\n<li><strong>relative_phases</strong> (bool):\nDetermines whether the individual relative phases (if True) or the individual rho values (if False) are plotted in the heatmap. Default is False, to plot the individual rho.</li>\n<li><strong>start</strong> (int):\nThe starting point of the plot. Default is the first timestep of the signals' duration.</li>\n<li><strong>end</strong> (int):\nThe ending point of the plot. Default is the last timestep of the signals' duration.</li>\n<li><strong>gradient</strong> (bool):\nDetermines whether the heatmap is displayed as a gradient, or matches the window and step size of the group metric. Default is False.</li>\n<li><strong>figsize</strong> (tuple):\nThe width and height of the figure in inches, respectively. Default is (8,4).</li>\n<li><strong>custom_cols</strong> (tuple):\nThe colors and line color to use for the plots. Default is ('YlOrRd', 'black').</li>\n<li><strong>bounded_yaxis</strong> (bool):\nDetermines whether the y-axis limits of the group metric are bounded to their range. Default is True.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>figure</strong> (figure):\nA figure containing the time-varying group rho and individual rho, along with axes labels and a colorbar.</li>\n</ul>\n", "signature": "(\n    phases,\n    relative_phases=False,\n    start=None,\n    end=None,\n    gradient=False,\n    figsize=None,\n    custom_cols=None,\n    bounded_yaxis=True\n)", "funcdef": "def"}, {"fullname": "multiSyncPy.visualisations.plot_synchronyindex", "modulename": "multiSyncPy.visualisations", "qualname": "plot_synchronyindex", "type": "function", "doc": "<p>Plots the windowed synchrony index over a heatmap of either the drivers or empaths of synchrony. </p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>data</strong> (ndarray):\nAn array containing the multivariate time series with shape (number_signals, duration).</li>\n<li><strong>window_length</strong> (int):\nThe number of time steps to be included in a window.</li>\n<li><strong>step</strong> (int):\nThe number of time steps by which to move forward in order to obtain the next window.</li>\n<li><strong>driver</strong> (bool):\nDetermines whether the drivers (if True) or the empaths (if False) are plotted in the heatmap. Default is True, to plot the drivers.</li>\n<li><strong>lag_length</strong> (int):\nThe number of samples for lag length - used by the synchrony metric, default = 10.</li>\n<li><strong>gradient</strong> (bool):\nDetermines whether the heatmap is displayed as a gradient, or matches the window and step size of the group metric. Default is False.</li>\n<li><strong>figsize</strong> (tuple):\nThe width and height of the figure in inches, respectively. Default is (8,4).</li>\n<li><strong>custom_cols</strong> (tuple):\nThe colors and line color to use for the plots. Default is ('YlOrRd', 'black').</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>figure</strong> (figure):\nA figure containing the windowed group synchrony index and the windowed driver or empath scores for each signal, along with axes labels and a colorbar.</li>\n</ul>\n", "signature": "(\n    data,\n    window_length,\n    step=None,\n    driver=True,\n    lag_length=10,\n    gradient=False,\n    figsize=None,\n    custom_cols=None\n)", "funcdef": "def"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();